# notice that all xxxClass should be exactly equals {this class}.getName()
tracer:
  sampler:
    # between 0 and 100(integer number)
    rate: 100
  watcher:
    async: false
    # define how to separate info (String) collected
    separator: '|'
    # separator method args
    argsSeparator: '&'
    # which extra info need to be collected from runtime
    recordField:
    - methodName
    - methodDesc
    - currentThread
    - currentTimeMills
    - traceId
    - spanId
    - duration
    # record method args(use toString method)
    - methodArgs
    recordMode:
      # use log4j2      
      log:
        dir: /home/k3a/Downloads
      # use kcp
#      kcp:
#        host: localhost
#        port: 2222
    # helper class must implement org.mole.tracer.plugins.TraceHelper(this class is used to generate trace id and span id)
    helperClass: org.k3a.TestTraceHelper
    # define watched methods by setting class name(you can also define watched methods by setting annotation,when names and annotation are both set,names will be used)
    names:
      # the name of watched method(with desc)
      org.k3a.Bob#doSomething(java.lang.String,int):
        # the class of trace object(in method args)
        traceClass: int
        # the class of span object(in method args)
        spanClass: java.lang.Object
      # another method '.' as wildcard(match all method with this name , no matter what args )
      org.k3a.Bob#doSomething(.):
        traceClass: int
        spanClass: java.util.List
    # you can also use annotation to mark methods
    annotation:
      # annotation of method
      method: org.mole.tracer.plugins.Watched
      # annotation of trace object
      trace: org.mole.tracer.plugins.Trace
      # annotation of span object
      span: org.mole.tracer.plugins.Span
